Index: e_tests/test_03_e_mypage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom selenium.webdriver.common.by import By\r\nfrom selenium.webdriver.support.ui import WebDriverWait\r\nfrom selenium.webdriver.support import expected_conditions as EC\r\nfrom selenium.common.exceptions import TimeoutException, ElementNotInteractableException\r\nimport os\r\nimport random\r\n\r\n\r\n@pytest.mark.e_test\r\ndef test_007_teacher_mypage1(driver_incognito, base_url):\r\n    \"\"\"대시보드 - 메인 페이지 진입\"\"\"\r\n    try:\r\n        # 대시보드 프로필 아이콘 클릭\r\n        profile_box_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#renewalMainPage > div:nth-child(2) > div > div.intro_today_area.intro_area > div.intro-today.intro_character > div > div.intro_profile.intro-today__info.box-bg__white > div.today-info__profile > div > p\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", profile_box_button)\r\n        print(\"대시보드 프로필 이미지 클릭\")\r\n\r\n    except Exception as e:\r\n        print(f\"Fail: 대시보드 프로필 이미지 클릭 실패 - {str(e)}\")\r\n        driver_incognito.save_screenshot(\"teacher_mypage_failure.png\")\r\n        assert False, f\"대시보드 프로필 이미지 클릭 실패: {str(e)}\"\r\n\r\n    # 대시보드 > 마이페이지 접근 확인\r\n    try:\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            EC.url_contains(\"/v2/mypage/modify\")\r\n        )\r\n        print(\"교사가 대시보드 프로필로 마이페이지에 접근했습니다.\")\r\n    except TimeoutException:\r\n        print(\"Fail: 교사 대시보드 프로필로 마이페이지 접근 실패\")\r\n        driver_incognito.save_screenshot(\"teacher_dashboard_failure.png\")\r\n        assert False, \"교사 대시보드 프로필로 마이페이지 접근 실패\"\r\n\r\n    # 마이페이지에서 뒤로가기 또는 /today로 진입\r\n    try:\r\n        # 뒤로가기\r\n        driver_incognito.back()\r\n        print(\"뒤로가기 클릭\")\r\n\r\n        # 또는 /today로 진입\r\n        # driver_incognito.get(\"/today\")\r\n        # print(\"/today 페이지로 진입했습니다.\")\r\n        \r\n        # 대시보드 페이지 접근 확인\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            EC.url_contains(\"/today\")  # /main 제거\r\n        )\r\n        print(\"교사가 대시보드 페이지에 접근했습니다.\")\r\n    except TimeoutException:\r\n        print(\"Fail: 대시보드 접근 실패\")\r\n        driver_incognito.save_screenshot(\"dashboard_failure.png\")\r\n        assert False, \"대시보드 접근 실패\"\r\n\r\n@pytest.mark.e_test\r\ndef test_008_teacher_mypage2(driver_incognito, base_url):\r\n    \"\"\"사용자 드롭다운 메뉴로 마이페이지 진입 및 버튼 확인\"\"\"\r\n    \r\n    try:\r\n        # 대시보드 프로필 아이콘 클릭\r\n        header_profile_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > button > span\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", header_profile_button)\r\n        print(\"대시보드 프로필 이미지 클릭\")\r\n\r\n        # 드롭다운 팝업 확인\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            EC.visibility_of_element_located(\r\n                (By.CSS_SELECTOR, \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div\"))\r\n        )\r\n        print(\"드롭다운 팝업이 노출되었습니다.\")\r\n\r\n        # 버튼 확인\r\n        button_selectors = [\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(1) > div > a:nth-child(1)\",  # 정보 수정\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(1) > div > a:nth-child(2)\",  # 나의 이력\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(2) > div > a:nth-child(1)\",  # 1:1 문의\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(2) > div > a:nth-child(2)\",  # 이용약관\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(2) > div > a:nth-child(3)\",  # 개인정보 처리방침\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(2) > div > a:nth-child(4)\",  # 탈퇴\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(3) > div > a:nth-child(1)\",  # 공지사항\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(3) > div > a:nth-child(2)\",  # 자주 묻는 질문\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(3) > div > a:nth-child(3)\"   # 이용 안내\r\n        ]\r\n\r\n        for selector in button_selectors:\r\n            button = WebDriverWait(driver_incognito, 10).until(\r\n                EC.presence_of_element_located((By.CSS_SELECTOR, selector))\r\n            )\r\n            assert button.is_displayed(), f\"버튼이 노출되지 않았습니다: {selector}\"\r\n            print(f\"버튼이 정상적으로 노출되었습니다: {selector}\")\r\n\r\n        print(\"모든 버튼이 정상적으로 노출되었습니다. - Pass\")\r\n\r\n    except Exception as e:\r\n        print(f\"Fail: 버튼 노출 확인 실패 - {str(e)}\")\r\n\r\n\r\n@pytest.mark.e_test\r\ndef test_009_teacher_mypage3(driver_incognito, base_url):\r\n    \"\"\"나의 이력 버튼 클릭을 통한 마이페이지 진입 확인 및 정보 수정 페이지 접근 확인\"\"\"\r\n    \r\n    try:\r\n        # 드롭다운 팝업이 열려 있는 상태에서 나의 이력 버튼 클릭\r\n        mypage_record_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(1) > div > a:nth-child(2)\"))  # 나의 이력\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", mypage_record_button)\r\n        print(\"나의 이력 버튼 클릭\")\r\n\r\n        # 나의 이력 페이지 확인\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            EC.url_contains(\"/v2/mypage/record\")  # 나의 이력 페이지 URL 확인\r\n        )\r\n        print(\"나의 이력 페이지에 접근했습니다.\")\r\n\r\n        # 정보 수정 버튼 클릭\r\n        info_modify_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#record > div > div > div.mypage--left > div.mypage--left__menubox > div:nth-child(1) > div > a:nth-child(1)\"))  # 정보 수정\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", info_modify_button)\r\n        print(\"정보 수정 버튼 클릭\")\r\n\r\n        # 정보 수정 페이지 확인\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            EC.url_contains(\"/v2/mypage/modify\")  # 정보 수정 페이지 URL 확인\r\n        )\r\n        print(\"정보 수정 페이지에 접근했습니다.\")\r\n\r\n    except Exception as e:\r\n        print(f\"Fail: 나의 이력 페이지 접근 또는 정보 수정 페이지 접근 실패 - {str(e)}\")\r\n        driver_incognito.save_screenshot(\"mypage_history_failure.png\")\r\n        assert False, f\"나의 이력 페이지 또는 정보 수정 페이지 접근 실패: {str(e)}\"\r\n        \r\n@pytest.mark.e_test\r\ndef test_010_teacher_modify(driver_incognito, base_url):\r\n    \"\"\"회원정보 (비밀번호/이메일) 수정\"\"\"\r\n\r\n    try:\r\n        # 비밀번호 입력 필드 찾기 및 값 입력\r\n        password_input = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--right.mypage-member > form > table > tbody > tr:nth-child(3) > td > div > input[type=password]\"))\r\n        )\r\n        password_input.clear()  # 기존 값 지우기\r\n        password_input.send_keys('2w2w2w2w2w')\r\n        print(\"비밀번호 입력 완료\")\r\n\r\n        # 인증하기 버튼 클릭\r\n        verify_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--right.mypage-member > form > table > tbody > tr:nth-child(3) > td > div > button\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", verify_button)\r\n        print(\"인증하기 버튼 클릭\")\r\n\r\n        # 확인 팝업의 버튼 클릭\r\n        confirm_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div:nth-child(2) > div > div > div.layer__container.alert.active > div.page__button > button\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", confirm_button)\r\n        print(\"확인 팝업 버튼 클릭\")\r\n\r\n        # 새 비밀번호 입력 필드에 값 입력\r\n        new_password_input = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--right.mypage-member > form > table > tbody > tr:nth-child(4) > td > input\"))\r\n        )\r\n        new_password_input.clear()  # 기존 값 지우기\r\n        new_password_input.send_keys('2w2w2w2w2w')\r\n        print(\"새 비밀번호 입력 완료\")\r\n\r\n        # 비밀번호 확인 입력 필드에 값 입력\r\n        confirm_password_input = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--right.mypage-member > form > table > tbody > tr:nth-child(5) > td > input\"))\r\n        )\r\n        confirm_password_input.clear()  # 기존 값 지우기\r\n        confirm_password_input.send_keys('2w2w2w2w2w')\r\n        print(\"비밀번호 확인 입력 완료\")\r\n\r\n        # 이메일 입력 필드에 값 입력\r\n        email_input = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--right.mypage-member > form > table > tbody > tr:nth-child(7) > td > div > input:nth-child(1)\"))\r\n        )\r\n        email_input.clear()  # 기존 값 지우기\r\n        email_input.send_keys('seleniumeclass1')\r\n        print(\"이메일 입력 완료\")\r\n\r\n        # 수정 완료 버튼 클릭\r\n        submit_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--right.mypage-member > div.page__button > button.button-main.is--large.violet.width-240\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", submit_button)\r\n        print(\"수정 완료 버튼 클릭\")\r\n\r\n        # 확인 팝업의 버튼 클릭\r\n        final_confirm_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div:nth-child(2) > div > div > div.layer__container.alert.active > div.page__button > button\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", final_confirm_button)\r\n        print(\"최종 확인 팝업 버튼 클릭\")\r\n\r\n    except Exception as e:\r\n        print(f\"Fail: 회원정보 수정 실패 - {str(e)}\")\r\n        driver_incognito.save_screenshot(\"teacher_modify_failure.png\")\r\n        assert False, f\"회원정보 수정 실패: {str(e)}\"\r\n\r\n@pytest.mark.e_test\r\ndef test_011_teacher_profile_picture(driver_incognito, base_url):\r\n    \"\"\"프로필 사진 변경 테스트\"\"\"\r\n\r\n    try:\r\n        # 기존 프로필 사진 요소 가져오기\r\n        existing_profile_picture = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--left > div.mypage--left__profile > div > p\"))  # 기존 프로필 사진의 CSS 선택자\r\n        )\r\n        \r\n        # 기존 프로필 사진 상태 확인\r\n        existing_image_class = existing_profile_picture.get_attribute(\"class\")\r\n        print(f\"기존 프로필 사진 클래스: {existing_image_class}\")\r\n\r\n        # 기존 이미지가 없을 경우\r\n        if \"avatar-no-image\" in existing_image_class:\r\n            existing_image_number = None\r\n            print(\"기존 프로필 사진이 없습니다.\")\r\n        else:\r\n            # 기존 프로필 사진 URL 가져오기\r\n            existing_image_style = existing_profile_picture.get_attribute(\"style\")\r\n            existing_image_url = existing_image_style.split(\"url(\")[1].split(\")\")[0].replace(\"&quot;\", \"\")  # 기존 이미지 URL\r\n            existing_image_number = existing_image_url.split(\"/\")[-1].split(\".\")[0]  # URL에서 숫자 부분 추출\r\n            print(f\"기존 프로필 사진 URL: {existing_image_url}, 숫자: {existing_image_number}\")\r\n\r\n        # 프로필 사진 선택 버튼 클릭\r\n        profile_picture_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--left > div.mypage--left__profile > div > button > p\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", profile_picture_button)\r\n        print(\"프로필 사진 선택 버튼 클릭\")\r\n\r\n        # 팝업 확인\r\n        try:\r\n            # 팝업이 나타나는지 확인\r\n            popup = WebDriverWait(driver_incognito, 10).until(\r\n                EC.visibility_of_element_located(\r\n                    (By.CSS_SELECTOR, \"#contentsContainer > div.layer-area.modal-area.modal-confirm__popup.ele_ui > div.layer__container\"))\r\n            )\r\n            print(\"팝업이 나타났습니다.\")\r\n\r\n            # 확인 버튼 클릭 가능할 때까지 기다리기\r\n            confirm_button = WebDriverWait(driver_incognito, 10).until(\r\n                EC.element_to_be_clickable(\r\n                    (By.CSS_SELECTOR, \"#confirmPoupOk\")\r\n                )\r\n            )\r\n            driver_incognito.execute_script(\"arguments[0].click();\", confirm_button)\r\n            print(\"확인 버튼 클릭\")\r\n\r\n            # 팝업이 닫힐 때까지 대기\r\n            WebDriverWait(driver_incognito, 10).until(\r\n                EC.invisibility_of_element_located(\r\n                    (By.CSS_SELECTOR, \"#contentsContainer > div.layer-area.modal-area.modal-confirm__popup.ele_ui > div.layer__container\")\r\n                )\r\n            )\r\n            print(\"팝업이 닫혔습니다.\")\r\n\r\n            # 프로필 아이콘 다시 클릭\r\n            profile_picture_button = WebDriverWait(driver_incognito, 10).until(\r\n                EC.presence_of_element_located(\r\n                    (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--left > div.mypage--left__profile > div > button > p\"))\r\n            )\r\n            driver_incognito.execute_script(\"arguments[0].click();\", profile_picture_button)\r\n            print(\"프로필 사진 선택 버튼 클릭\")\r\n\r\n        except TimeoutException:\r\n            print(\"팝업이 나타나지 않았습니다. 계속 진행합니다.\")\r\n\r\n        # 파일 경로 설정\r\n        file_directory = r\"C:\\Users\\Admin\\PycharmProjects\\selenium-pytest\\inputfile\\profile\"\r\n        files = [f for f in os.listdir(file_directory) if f.endswith(('.jpg', '.jpeg', '.png'))]  # 이미지 파일 목록 가져오기\r\n\r\n        # 랜덤으로 파일 선택\r\n        selected_file = random.choice(files)\r\n        file_path = os.path.join(file_directory, selected_file)\r\n        print(f\"선택된 이미지 파일: {file_path}\")\r\n\r\n        # 파일 선택 대화상자에서 이미지 파일 선택\r\n        file_input = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"input[type='file']\"))  # 파일 입력 필드 선택\r\n        )\r\n        file_input.send_keys(file_path)  # 랜덤으로 선택된 이미지 파일 경로 입력\r\n        print(\"이미지 파일 선택 완료\")\r\n\r\n        # 변경된 프로필 사진 요소 가져오기\r\n        new_profile_picture = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--left > div.mypage--left__profile > div > p\"))  # 변경된 프로필 사진의 CSS 선택자\r\n        )\r\n        \r\n        # 변경된 프로필 사진이 로드될 때까지 대기\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            lambda driver: new_profile_picture.get_attribute(\"style\") != \"\"  # 스타일 속성이 비어있지 않을 때까지 대기\r\n        )\r\n\r\n        # 변경된 프로필 사진 상태 확인\r\n        new_image_class = new_profile_picture.get_attribute(\"class\")\r\n        print(f\"변경된 프로필 사진 클래스: {new_image_class}\")\r\n\r\n        # 변경된 이미지가 없을 경우\r\n        if \"avatar-no-image\" in new_image_class:\r\n            new_image_number = None\r\n            print(\"변경된 프로필 사진이 없습니다.\")\r\n        else:\r\n            # 변경된 프로필 사진 URL 가져오기\r\n            new_image_style = new_profile_picture.get_attribute(\"style\")\r\n            new_image_url = new_image_style.split(\"url(\")[1].split(\")\")[0].replace(\"&quot;\", \"\")  # 변경된 이미지 URL\r\n            new_image_number = new_image_url.split(\"/\")[-1].split(\".\")[0]  # URL에서 숫자 부분 추출\r\n            print(f\"변경된 프로필 사진 URL: {new_image_url}, 숫자: {new_image_number}\")\r\n\r\n        # 기존 이미지 숫자와 변경된 이미지 숫자 비교\r\n        if existing_image_number is not None and new_image_number is not None and existing_image_number != new_image_number:\r\n            print(\"프로필 사진이 성공적으로 변경되었습니다.\")\r\n        elif existing_image_number is None and new_image_number is not None:\r\n            print(\"프로필 사진이 성공적으로 추가되었습니다.\")\r\n        else:\r\n            assert False, \"프로필 사진이 변경되지 않았습니다.\"\r\n\r\n    except Exception as e:\r\n        print(f\"Fail: 프로필 사진 변경 실패 - {str(e)}\")\r\n        driver_incognito.save_screenshot(\"teacher_profile_picture_failure.png\")\r\n        assert False, f\"프로필 사진 변경 실패: {str(e)}\"\r\n\r\n #@pytest.mark.e_test\r\n #def test_012_teacher_profile_picture(driver_incognito, base_url):\r\n\r\n    
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/e_tests/test_03_e_mypage.py b/e_tests/test_03_e_mypage.py
--- a/e_tests/test_03_e_mypage.py	(revision cc171a47b1a8e49266df289afc69c2dfcb6e95cd)
+++ b/e_tests/test_03_e_mypage.py	(date 1735191640927)
@@ -288,13 +288,14 @@
         except TimeoutException:
             print("팝업이 나타나지 않았습니다. 계속 진행합니다.")
 
-        # 파일 경로 설정
-        file_directory = r"C:\Users\Admin\PycharmProjects\selenium-pytest\inputfile\profile"
-        files = [f for f in os.listdir(file_directory) if f.endswith(('.jpg', '.jpeg', '.png'))]  # 이미지 파일 목록 가져오기
+        # 파일 경로 설정 (상대 경로로 변경)
+        current_dir = os.path.dirname(os.path.abspath(__file__))  # 현재 파일의 디렉토리 경로
+        inputfile_directory = os.path.join(current_dir, '..', 'inputfile','profile')  # inputfile 폴더의 상대 경로
+        files = [f for f in os.listdir(inputfile_directory) if f.endswith(('.jpg', '.jpeg', '.png'))]  # 이미지 파일 목록 가져오기
 
         # 랜덤으로 파일 선택
         selected_file = random.choice(files)
-        file_path = os.path.join(file_directory, selected_file)
+        file_path = os.path.join(inputfile_directory, selected_file)  # 선택된 파일의 전체 경로
         print(f"선택된 이미지 파일: {file_path}")
 
         # 파일 선택 대화상자에서 이미지 파일 선택
Index: e_tests/test_01_e_login.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom selenium.webdriver.common.by import By\r\nfrom selenium.webdriver.support.ui import WebDriverWait\r\nfrom selenium.webdriver.support import expected_conditions as EC\r\nfrom selenium.common.exceptions import TimeoutException, ElementNotInteractableException\r\n\r\n@pytest.mark.e_test\r\n\r\ndef click_element(driver, element):\r\n    \"\"\"JavaScript를 사용하여 요소 클릭\"\"\"\r\n    driver.execute_script(\"arguments[0].click();\", element)\r\n\r\n\r\ndef test_001_teacher_login(driver_incognito, login_data):\r\n    \"\"\"교사 로그인 테스트\"\"\"\r\n    WEBSITE_URL, TEACHER_ID, PASSWORD = login_data\r\n    driver_incognito.get(WEBSITE_URL)\r\n    print(\"교사 로그인: 웹사이트에 접속했습니다.\")\r\n\r\n# 1. 시스템 공지 팝업 닫기 버튼 클릭 전에 체크박스 체크\r\n    try:\r\n        # 시스템 공지 팝업 닫기 버튼 확인\r\n        sys_notice_button = WebDriverWait(driver_incognito, 5).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"#sysNoticeTemp > div > div.layer__contents > div.page__button.padding-t-25.padding-b-20 > button\"))\r\n        )\r\n        if sys_notice_button.is_displayed():  # 시스템 공지 팝업 닫기 버튼이 보이는지 확인\r\n\r\n            # 체크박스 체크\r\n            hide_all_day_checkbox = WebDriverWait(driver_incognito, 5).until(\r\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"#hideAllDay\"))\r\n            )\r\n            if not hide_all_day_checkbox.is_selected():  # 체크박스가 체크되어 있지 않으면 체크\r\n                hide_all_day_checkbox.click()\r\n                print(\"오늘 하루 보지 않기 체크박스 체크\")\r\n\r\n            sys_notice_button.click()\r\n            print(\"시스템 공지 팝업 닫기 버튼 클릭\")\r\n\r\n        else:\r\n            print(\"시스템 공지 팝업이 보이지 않음, 클릭하지 않음.\")\r\n    except TimeoutException:\r\n        print(\"시스템 공지 팝업 닫기 버튼이 없음, 클릭하지 않음.\")\r\n\r\n    # 2. 노티 팝업 확인 버튼 클릭\r\n    try:\r\n        popup_button = WebDriverWait(driver_incognito, 5).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"#notiPopupOk\"))\r\n        )\r\n        if popup_button.is_displayed():  # 노티 팝업 확인 버튼이 보이는지 확인\r\n            driver_incognito.execute_script(\"arguments[0].scrollIntoView(true);\", popup_button)  # 버튼이 보이도록 스크롤\r\n            popup_button.click()\r\n            print(\"노티 팝업 확인 버튼 클릭\")\r\n        else:\r\n            print(\"노티 팝업이 보이지 않음, 클릭하지 않음.\")\r\n    except TimeoutException:\r\n        print(\"노티 팝업 확인 버튼이 없음, 클릭하지 않음.\")\r\n\r\n\r\n    # 3. 아이디 / 패스워드 입력\r\n    try:\r\n        login_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \".login--item:nth-child(2) > .login--item-button\"))\r\n        )\r\n        click_element(driver_incognito, login_button)\r\n        \r\n        # 다른 클릭 동작들도 동일하게 처리\r\n        driver_incognito.find_element(By.ID, \"mbrId\").send_keys(TEACHER_ID)\r\n        driver_incognito.find_element(By.ID, \"loginPw\").send_keys(PASSWORD)\r\n        login_submit = driver_incognito.find_element(By.CSS_SELECTOR, \".margin-t-29\")\r\n        click_element(driver_incognito, login_submit)\r\n        print(\"교사 로그인 정보 입력 및 로그인 버튼 클릭\")\r\n    except TimeoutException:\r\n        print(\"Fail: 교사 로그인 실패\")\r\n        driver_incognito.save_screenshot(\"teacher_login_failure.png\")\r\n        assert False, \"교사 로그인 실패\"\r\n\r\n    # 2. 인증번호 발송 확인 팝업의 확인 버튼 클릭\r\n    try:\r\n        confirm_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"#notiPopupOk\"))  # 인증번호 발송 확인 버튼\r\n        )\r\n        if confirm_button.is_displayed():  # 인증번호 발송 확인 버튼이 보이는지 확인\r\n            driver_incognito.execute_script(\"arguments[0].scrollIntoView(true);\", confirm_button)  # 버튼이 보이도록 스크롤\r\n            confirm_button.click()  # JavaScript로 버튼 클릭\r\n            print(\"인증번호 발송 확인 버튼 클릭\")\r\n        else:\r\n            print(\"인증번호 발송 확인 버튼이 보이지 않음, 클릭하지 않음.\")\r\n    except TimeoutException:\r\n        print(\"인증번호 발송 확인 버튼이 없음, 클릭하지 않음.\")\r\n\r\n    # 3. 인증번호 입력 처리\r\n    try:\r\n        otp_input = WebDriverWait(driver_incognito, 5).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"#login_form > div > div > div > div.otp-box > input\"))\r\n        )\r\n        if otp_input.is_displayed():  # 인증번호 입력 필드가 보이는지 확인\r\n            otp_input.send_keys(\"999999\")\r\n            driver_incognito.find_element(By.CSS_SELECTOR, \"#login_form > div > div > div > div.otp-box > div > button.button-main.violet\").click()\r\n            print(\"인증번호 입력 및 확인 버튼 클릭\")\r\n        else:\r\n            print(\"인증번호 입력 필드가 보이지 않음, 입력하지 않음.\")\r\n    except TimeoutException:\r\n        print(\"인증번호 입력 필드가 없음, 입력하지 않음.\")\r\n\r\n    # 대시보드 페이지 접근 확인\r\n    try:\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            EC.url_contains(\"/today\")  # /main 제거\r\n        )\r\n        print(\"교사가 대시보드 페이지에 접근했습니다.\")\r\n    except TimeoutException:\r\n        print(\"Fail: 교사 대시보드 접근 실패\")\r\n        driver_incognito.save_screenshot(\"teacher_dashboard_failure.png\")\r\n        assert False, \"교사 대시보드 접근 실패\"\r\n\r\n@pytest.mark.e_test\r\n\r\ndef test_002_student_login(driver_normal, login_data):\r\n    \"\"\"학생 로그인 테스트\"\"\"\r\n    WEBSITE_URL, STUDENT_ID, STUDENT_NUM, PASSWORD = login_data\r\n    driver_normal.get(WEBSITE_URL)\r\n    print(\"학생 로그인: 웹사이트에 접속했습니다.\")\r\n\r\n# 1. 시스템 공지 팝업 닫기 버튼 클릭 전에 체크박스 체크\r\n    try:\r\n        # 시스템 공지 팝업 닫기 버튼 확인\r\n        sys_notice_button = WebDriverWait(driver_normal, 5).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"#sysNoticeTemp > div > div.layer__contents > div.page__button.padding-t-25.padding-b-20 > button\"))\r\n        )\r\n        if sys_notice_button.is_displayed():  # 시스템 공지 팝업 닫기 버튼이 보이는지 확인\r\n\r\n            # 체크박스 체크\r\n            hide_all_day_checkbox = WebDriverWait(driver_normal, 5).until(\r\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"#hideAllDay\"))\r\n            )\r\n            if not hide_all_day_checkbox.is_selected():  # 체크박스가 체크되어 있지 않으면 체크\r\n                hide_all_day_checkbox.click()\r\n                print(\"오늘 하루 보지 않기 체크박스 체크\")\r\n\r\n            sys_notice_button.click()\r\n            print(\"시스템 공지 팝업 닫기 버튼 클릭\")\r\n\r\n        else:\r\n            print(\"시스템 공지 팝업이 보이지 않음, 클릭하지 않음.\")\r\n    except TimeoutException:\r\n        print(\"시스템 공지 팝업 닫기 버튼이 없음, 클릭하지 않음.\")\r\n\r\n    # 2. 노티 팝업 확인 버튼 클릭\r\n    try:\r\n        popup_button = WebDriverWait(driver_normal, 5).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"#notiPopupOk\"))\r\n        )\r\n        if popup_button.is_displayed():  # 노티 팝업 확인 버튼이 보이는지 확인\r\n            driver_normal.execute_script(\"arguments[0].scrollIntoView(true);\", popup_button)  # 버튼이 보이도록 스크롤\r\n            popup_button.click()\r\n            print(\"노티 팝업 확인 버튼 클릭\")\r\n        else:\r\n            print(\"노티 팝업이 보이지 않음, 클릭하지 않음.\")\r\n    except TimeoutException:\r\n        print(\"노티 팝업 확인 버튼이 없음, 클릭하지 않음.\")\r\n    \r\n    try:\r\n        # 로그인 버튼 클릭\r\n        student_login_button = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"#login > div > div.main-login > div.main-login--button > button:nth-child(1)\"))\r\n        )\r\n        click_element(driver_normal, student_login_button)\r\n        print(\"학생 로그인 버튼 클릭\")\r\n        \r\n        # 학교 검색 버튼 클릭하여 팝업 열기\r\n        search_button = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"#login_form > div > div > div.input-box.input-box--text.is--search.bg--gray > button\"))\r\n        )\r\n        click_element(driver_normal, search_button)\r\n        print(\"학교 검색 팝업 열기\")\r\n        \r\n        # 학교명 입력\r\n        WebDriverWait(driver_normal, 10).until(\r\n            EC.visibility_of_element_located((By.ID, \"schoolFind\"))\r\n        )\r\n        school_input = driver_normal.find_element(By.ID, \"schoolFind\")\r\n        school_input.send_keys(STUDENT_ID)\r\n        \r\n        # 검색 버튼 클릭\r\n        search_btn = driver_normal.find_element(By.ID, \"schFindBtn\")\r\n        click_element(driver_normal, search_btn)\r\n        print(\"학교 검색 버튼 클릭\")\r\n        \r\n        # 검색 결과가 나올 때까지 대기 (라벨 텍스트로 확인)\r\n        search_result = WebDriverWait(driver_normal, 10).until(\r\n            EC.presence_of_element_located((By.XPATH, f\"//label[contains(text(), '{STUDENT_ID}')]\"))\r\n        )\r\n        print(\"학교 검색 결과 확인\")\r\n        \r\n        # 검색된 학교의 라디오 버튼 클릭\r\n        radio_id = search_result.get_attribute(\"for\")\r\n        radio_button = driver_normal.find_element(By.ID, radio_id)\r\n        click_element(driver_normal, radio_button)\r\n        print(\"학교 라디오 버튼 선택\")\r\n        \r\n        # 선택 버튼 클릭\r\n        select_button = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.ID, \"schSelectBtn\"))\r\n        )\r\n        click_element(driver_normal, select_button)\r\n        print(\"학교 선택 완료\")\r\n        \r\n        # 팝업 확인 버튼 클릭 후 대기\r\n        popup_confirm = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"body > div.wrap.is--dark > div.layer-area.modal-area.modal-default.is--school--setting > div.layer__container > div.page__button > button.button-main.violet\"))\r\n        )\r\n        click_element(driver_normal, popup_confirm)\r\n        print(\"학교 선택 팝업 확인\")\r\n        \r\n        # 팝업이 사라질 때까지 대기\r\n        WebDriverWait(driver_normal, 10).until(\r\n            EC.invisibility_of_element_located((By.CSS_SELECTOR, \"div.layer-area.modal-area.modal-default.is--school--setting\"))\r\n        )\r\n        \r\n        # 학년 선택\r\n        grade_dropdown = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.ID, \"selectedStdnSchyr\"))\r\n        )\r\n        click_element(driver_normal, grade_dropdown)\r\n        first_grade = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \".dropdown--item\"))\r\n        )\r\n        click_element(driver_normal, first_grade)\r\n        \r\n        # 반 선택\r\n        class_dropdown = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.ID, \"selectedStdnBan\"))\r\n        )\r\n        click_element(driver_normal, class_dropdown)\r\n        first_class = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \".open .dropdown--item\"))\r\n        )\r\n        click_element(driver_normal, first_class)\r\n        \r\n        # 번호 선택\r\n        number_dropdown = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.ID, \"selectedStdnNum\"))\r\n        )\r\n        click_element(driver_normal, number_dropdown)\r\n        first_number = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \".open .dropdown--item:nth-child(1)\"))\r\n        )\r\n        click_element(driver_normal, first_number)\r\n        \r\n        # 비밀번호 입력\r\n        driver_normal.find_element(By.ID, \"stdn_loginPw\").send_keys(PASSWORD)\r\n        \r\n        # 로그인 버튼 클릭\r\n        login_button = driver_normal.find_element(By.CSS_SELECTOR, \"#login_form > div > div > button\")\r\n        click_element(driver_normal, login_button)\r\n        print(\"학생 로그인 정보 입력 및 로그인 버튼 클릭\")\r\n        \r\n        # 중복 로그인 팝업 처리\r\n        try:\r\n            duplicate_login_confirm = WebDriverWait(driver_normal, 5).until(\r\n                EC.element_to_be_clickable((By.ID, \"confirmPoupOk\"))\r\n            )\r\n            click_element(driver_normal, duplicate_login_confirm)\r\n            print(\"중복 로그인 팝업 확인\")\r\n        except TimeoutException:\r\n            print(\"중복 로그인 팝업이 없습니다.\")\r\n            pass\r\n        \r\n    except TimeoutException:\r\n        print(\"Fail: 학생 로그인 실패\")\r\n        driver_normal.save_screenshot(\"student_login_failure.png\")\r\n        assert False, \"학생 로그인 실패\"\r\n\r\n    try:\r\n        WebDriverWait(driver_normal, 20).until(\r\n            EC.any_of(\r\n                EC.title_contains(\"학생 대시보드\"),\r\n                EC.presence_of_element_located((By.CSS_SELECTOR, \".user-info\")),\r\n                EC.url_contains(\"/today\")                \r\n            )\r\n        )\r\n        print(\"학생이 대시보드 페이지에 접근했습니다.\")\r\n    except TimeoutException:\r\n        print(\"Fail: 학생 대시보드 접근 실패\")\r\n        driver_normal.save_screenshot(\"student_dashboard_failure.png\")\r\n        assert False, \"학생 대시보드 접근 실패\"\r\n\r\n@pytest.mark.e_test\r\n\r\ndef test_003_teacher_logout(driver_incognito, base_url):\r\n    \"\"\"교사 로그아웃 테스트\"\"\"\r\n    try:\r\n        # 로그아웃 버튼 찾기\r\n        logout_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > button\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", logout_button)\r\n        print(\"로그아웃 버튼 클릭\")\r\n        \r\n        # 로그아웃 확인 팝업의 확인 버튼 클릭\r\n        confirm_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"#gnb > div:nth-child(3) > div > div > div.layer__container.confirm.active > div.page__button > button.button-main.is--large.violet\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", confirm_button)\r\n        print(\"로그아웃 확인 팝업 확인\")\r\n        \r\n        # 로그아웃 완료 팝업의 확인 버튼 클릭\r\n        complete_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"#gnb > div:nth-child(3) > div > div > div.layer__container.alert.active > div.page__button > button\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", complete_button)\r\n        print(\"로그아웃 완료 팝업 확인\")\r\n        \r\n        # 로그인 페이지로 이동 확인\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            EC.url_contains(base_url)\r\n        )\r\n        print(\"로그아웃 성공: 로그인 페이지로 이동\")\r\n        \r\n    except Exception as e:\r\n        print(f\"Fail: 로그아웃 실패 - {str(e)}\")\r\n        driver_incognito.save_screenshot(\"teacher_logout_failure.png\")\r\n        assert False, f\"로그아웃 실패: {str(e)}\"\r\n\r\n@pytest.mark.e_test\r\ndef test_004_student_logout(driver_normal, base_url):\r\n    \"\"\"학생 로그아웃 테스트\"\"\"\r\n    try:\r\n        # 로그아웃 버튼 찾기\r\n        logout_button = WebDriverWait(driver_normal, 10).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > button\"))\r\n        )\r\n        driver_normal.execute_script(\"arguments[0].click();\", logout_button)\r\n        print(\"로그아웃 버튼 클릭\")\r\n        \r\n        # 로그아웃 확인 팝업의 확인 버튼 클릭\r\n        confirm_button = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"#gnb > div:nth-child(3) > div > div > div.layer__container.confirm.active > div.page__button > button.button-main.is--large.violet\"))\r\n        )\r\n        driver_normal.execute_script(\"arguments[0].click();\", confirm_button)\r\n        print(\"로그아웃 확인 팝업 확인\")\r\n        \r\n        # 로그아웃 완료 팝업의 확인 버튼 클릭\r\n        complete_button = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"#gnb > div:nth-child(3) > div > div > div.layer__container.alert.active > div.page__button > button\"))\r\n        )\r\n        driver_normal.execute_script(\"arguments[0].click();\", complete_button)\r\n        print(\"로그아웃 완료 팝업 확인\")\r\n        \r\n        # 로그인 페이지로 이동 확인\r\n        WebDriverWait(driver_normal, 10).until(\r\n            EC.url_contains(base_url)\r\n        )\r\n        print(\"로그아웃 성공: 로그인 페이지로 이동\")\r\n        \r\n    except Exception as e:\r\n        print(f\"Fail: 로그아웃 실패 - {str(e)}\")\r\n        driver_normal.save_screenshot(\"student_logout_failure.png\")\r\n        assert False, f\"로그아웃 실패: {str(e)}\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/e_tests/test_01_e_login.py b/e_tests/test_01_e_login.py
--- a/e_tests/test_01_e_login.py	(revision cc171a47b1a8e49266df289afc69c2dfcb6e95cd)
+++ b/e_tests/test_01_e_login.py	(date 1735202894628)
@@ -102,6 +102,27 @@
     except TimeoutException:
         print("인증번호 입력 필드가 없음, 입력하지 않음.")
 
+    # 4. 중복 로그인 팝업 처리
+    try:
+        # 중복 로그인 팝업 확인
+        multi_login_popup = WebDriverWait(driver_incognito, 5).until(
+            EC.visibility_of_element_located((By.CSS_SELECTOR, "#teacher-multi-login > div.layer__container"))
+        )
+        print("중복 로그인 팝업이 나타났습니다.")
+
+        # 다른 기기 로그아웃 라디오 버튼 선택
+        force_logout_radio = driver_incognito.find_element(By.CSS_SELECTOR, "#force-logout")
+        force_logout_radio.click()
+        print("다른 기기 로그아웃 라디오 버튼 선택")
+
+        # 로그인 버튼 클릭
+        login_button = driver_incognito.find_element(By.CSS_SELECTOR, "#teacher-multi-login > div.layer__container > div.page__button > button.button-main.violet.width-150")
+        login_button.click()
+        print("로그인 버튼 클릭")
+
+    except TimeoutException:
+        print("중복 로그인 팝업이 나타나지 않았습니다. 대시보드 페이지 접근 확인합니다.")    
+
     # 대시보드 페이지 접근 확인
     try:
         WebDriverWait(driver_incognito, 10).until(
Index: test_script/test_01_e_login.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom selenium.webdriver.common.by import By\r\nfrom selenium.webdriver.support.ui import WebDriverWait\r\nfrom selenium.webdriver.support import expected_conditions as EC\r\nfrom selenium.common.exceptions import TimeoutException, ElementNotInteractableException\r\n\r\n@pytest.mark.e_test\r\n\r\ndef click_element(driver, element):\r\n    \"\"\"JavaScript를 사용하여 요소 클릭\"\"\"\r\n    driver.execute_script(\"arguments[0].click();\", element)\r\n\r\n\r\ndef test_001_teacher_login(driver_incognito, login_data):\r\n    \"\"\"교사 로그인 테스트\"\"\"\r\n    WEBSITE_URL, TEACHER_ID, PASSWORD = login_data\r\n    driver_incognito.get(WEBSITE_URL)\r\n    print(\"교사 로그인: 웹사이트에 접속했습니다.\")\r\n\r\n# 1. 시스템 공지 팝업 닫기 버튼 클릭 전에 체크박스 체크\r\n    try:\r\n        # 시스템 공지 팝업 닫기 버튼 확인\r\n        sys_notice_button = WebDriverWait(driver_incognito, 5).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"#sysNoticeTemp > div > div.layer__contents > div.page__button.padding-t-25.padding-b-20 > button\"))\r\n        )\r\n        if sys_notice_button.is_displayed():  # 시스템 공지 팝업 닫기 버튼이 보이는지 확인\r\n\r\n            # 체크박스 체크\r\n            hide_all_day_checkbox = WebDriverWait(driver_incognito, 5).until(\r\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"#hideAllDay\"))\r\n            )\r\n            if not hide_all_day_checkbox.is_selected():  # 체크박스가 체크되어 있지 않으면 체크\r\n                hide_all_day_checkbox.click()\r\n                print(\"오늘 하루 보지 않기 체크박스 체크\")\r\n\r\n            sys_notice_button.click()\r\n            print(\"시스템 공지 팝업 닫기 버튼 클릭\")\r\n\r\n        else:\r\n            print(\"시스템 공지 팝업이 보이지 않음, 클릭하지 않음.\")\r\n    except TimeoutException:\r\n        print(\"시스템 공지 팝업 닫기 버튼이 없음, 클릭하지 않음.\")\r\n\r\n    # 2. 노티 팝업 확인 버튼 클릭\r\n    try:\r\n        popup_button = WebDriverWait(driver_incognito, 5).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"#notiPopupOk\"))\r\n        )\r\n        if popup_button.is_displayed():  # 노티 팝업 확인 버튼이 보이는지 확인\r\n            driver_incognito.execute_script(\"arguments[0].scrollIntoView(true);\", popup_button)  # 버튼이 보이도록 스크롤\r\n            popup_button.click()\r\n            print(\"노티 팝업 확인 버튼 클릭\")\r\n        else:\r\n            print(\"노티 팝업이 보이지 않음, 클릭하지 않음.\")\r\n    except TimeoutException:\r\n        print(\"노티 팝업 확인 버튼이 없음, 클릭하지 않음.\")\r\n\r\n\r\n    # 3. 아이디 / 패스워드 입력\r\n    try:\r\n        login_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \".login--item:nth-child(2) > .login--item-button\"))\r\n        )\r\n        click_element(driver_incognito, login_button)\r\n        \r\n        # 다른 클릭 동작들도 동일하게 처리\r\n        driver_incognito.find_element(By.ID, \"mbrId\").send_keys(TEACHER_ID)\r\n        driver_incognito.find_element(By.ID, \"loginPw\").send_keys(PASSWORD)\r\n        login_submit = driver_incognito.find_element(By.CSS_SELECTOR, \".margin-t-29\")\r\n        click_element(driver_incognito, login_submit)\r\n        print(\"교사 로그인 정보 입력 및 로그인 버튼 클릭\")\r\n    except TimeoutException:\r\n        print(\"Fail: 교사 로그인 실패\")\r\n        driver_incognito.save_screenshot(\"teacher_login_failure.png\")\r\n        assert False, \"교사 로그인 실패\"\r\n\r\n    # 2. 인증번호 발송 확인 팝업의 확인 버튼 클릭\r\n    try:\r\n        confirm_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"#notiPopupOk\"))  # 인증번호 발송 확인 버튼\r\n        )\r\n        if confirm_button.is_displayed():  # 인증번호 발송 확인 버튼이 보이는지 확인\r\n            driver_incognito.execute_script(\"arguments[0].scrollIntoView(true);\", confirm_button)  # 버튼이 보이도록 스크롤\r\n            confirm_button.click()  # JavaScript로 버튼 클릭\r\n            print(\"인증번호 발송 확인 버튼 클릭\")\r\n        else:\r\n            print(\"인증번호 발송 확인 버튼이 보이지 않음, 클릭하지 않음.\")\r\n    except TimeoutException:\r\n        print(\"인증번호 발송 확인 버튼이 없음, 클릭하지 않음.\")\r\n\r\n    # 3. 인증번호 입력 처리\r\n    try:\r\n        otp_input = WebDriverWait(driver_incognito, 5).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"#login_form > div > div > div > div.otp-box > input\"))\r\n        )\r\n        if otp_input.is_displayed():  # 인증번호 입력 필드가 보이는지 확인\r\n            otp_input.send_keys(\"999999\")\r\n            driver_incognito.find_element(By.CSS_SELECTOR, \"#login_form > div > div > div > div.otp-box > div > button.button-main.violet\").click()\r\n            print(\"인증번호 입력 및 확인 버튼 클릭\")\r\n        else:\r\n            print(\"인증번호 입력 필드가 보이지 않음, 입력하지 않음.\")\r\n    except TimeoutException:\r\n        print(\"인증번호 입력 필드가 없음, 입력하지 않음.\")\r\n\r\n    # 대시보드 페이지 접근 확인\r\n    try:\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            EC.url_contains(\"/today\")  # /main 제거\r\n        )\r\n        print(\"교사가 대시보드 페이지에 접근했습니다.\")\r\n    except TimeoutException:\r\n        print(\"Fail: 교사 대시보드 접근 실패\")\r\n        driver_incognito.save_screenshot(\"teacher_dashboard_failure.png\")\r\n        assert False, \"교사 대시보드 접근 실패\"\r\n\r\n@pytest.mark.e_test\r\n\r\ndef test_002_student_login(driver_normal, login_data):\r\n    \"\"\"학생 로그인 테스트\"\"\"\r\n    WEBSITE_URL, STUDENT_ID, STUDENT_NUM, PASSWORD = login_data\r\n    driver_normal.get(WEBSITE_URL)\r\n    print(\"학생 로그인: 웹사이트에 접속했습니다.\")\r\n\r\n# 1. 시스템 공지 팝업 닫기 버튼 클릭 전에 체크박스 체크\r\n    try:\r\n        # 시스템 공지 팝업 닫기 버튼 확인\r\n        sys_notice_button = WebDriverWait(driver_normal, 5).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"#sysNoticeTemp > div > div.layer__contents > div.page__button.padding-t-25.padding-b-20 > button\"))\r\n        )\r\n        if sys_notice_button.is_displayed():  # 시스템 공지 팝업 닫기 버튼이 보이는지 확인\r\n\r\n            # 체크박스 체크\r\n            hide_all_day_checkbox = WebDriverWait(driver_normal, 5).until(\r\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"#hideAllDay\"))\r\n            )\r\n            if not hide_all_day_checkbox.is_selected():  # 체크박스가 체크되어 있지 않으면 체크\r\n                hide_all_day_checkbox.click()\r\n                print(\"오늘 하루 보지 않기 체크박스 체크\")\r\n\r\n            sys_notice_button.click()\r\n            print(\"시스템 공지 팝업 닫기 버튼 클릭\")\r\n\r\n        else:\r\n            print(\"시스템 공지 팝업이 보이지 않음, 클릭하지 않음.\")\r\n    except TimeoutException:\r\n        print(\"시스템 공지 팝업 닫기 버튼이 없음, 클릭하지 않음.\")\r\n\r\n    # 2. 노티 팝업 확인 버튼 클릭\r\n    try:\r\n        popup_button = WebDriverWait(driver_normal, 5).until(\r\n            EC.presence_of_element_located((By.CSS_SELECTOR, \"#notiPopupOk\"))\r\n        )\r\n        if popup_button.is_displayed():  # 노티 팝업 확인 버튼이 보이는지 확인\r\n            driver_normal.execute_script(\"arguments[0].scrollIntoView(true);\", popup_button)  # 버튼이 보이도록 스크롤\r\n            popup_button.click()\r\n            print(\"노티 팝업 확인 버튼 클릭\")\r\n        else:\r\n            print(\"노티 팝업이 보이지 않음, 클릭하지 않음.\")\r\n    except TimeoutException:\r\n        print(\"노티 팝업 확인 버튼이 없음, 클릭하지 않음.\")\r\n    \r\n    try:\r\n        # 로그인 버튼 클릭\r\n        student_login_button = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"#login > div > div.main-login > div.main-login--button > button:nth-child(1)\"))\r\n        )\r\n        click_element(driver_normal, student_login_button)\r\n        print(\"학생 로그인 버튼 클릭\")\r\n        \r\n        # 학교 검색 버튼 클릭하여 팝업 열기\r\n        search_button = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"#login_form > div > div > div.input-box.input-box--text.is--search.bg--gray > button\"))\r\n        )\r\n        click_element(driver_normal, search_button)\r\n        print(\"학교 검색 팝업 열기\")\r\n        \r\n        # 학교명 입력\r\n        WebDriverWait(driver_normal, 10).until(\r\n            EC.visibility_of_element_located((By.ID, \"schoolFind\"))\r\n        )\r\n        school_input = driver_normal.find_element(By.ID, \"schoolFind\")\r\n        school_input.send_keys(STUDENT_ID)\r\n        \r\n        # 검색 버튼 클릭\r\n        search_btn = driver_normal.find_element(By.ID, \"schFindBtn\")\r\n        click_element(driver_normal, search_btn)\r\n        print(\"학교 검색 버튼 클릭\")\r\n        \r\n        # 검색 결과가 나올 때까지 대기 (라벨 텍스트로 확인)\r\n        search_result = WebDriverWait(driver_normal, 10).until(\r\n            EC.presence_of_element_located((By.XPATH, f\"//label[contains(text(), '{STUDENT_ID}')]\"))\r\n        )\r\n        print(\"학교 검색 결과 확인\")\r\n        \r\n        # 검색된 학교의 라디오 버튼 클릭\r\n        radio_id = search_result.get_attribute(\"for\")\r\n        radio_button = driver_normal.find_element(By.ID, radio_id)\r\n        click_element(driver_normal, radio_button)\r\n        print(\"학교 라디오 버튼 선택\")\r\n        \r\n        # 선택 버튼 클릭\r\n        select_button = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.ID, \"schSelectBtn\"))\r\n        )\r\n        click_element(driver_normal, select_button)\r\n        print(\"학교 선택 완료\")\r\n        \r\n        # 팝업 확인 버튼 클릭 후 대기\r\n        popup_confirm = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"body > div.wrap.is--dark > div.layer-area.modal-area.modal-default.is--school--setting > div.layer__container > div.page__button > button.button-main.violet\"))\r\n        )\r\n        click_element(driver_normal, popup_confirm)\r\n        print(\"학교 선택 팝업 확인\")\r\n        \r\n        # 팝업이 사라질 때까지 대기\r\n        WebDriverWait(driver_normal, 10).until(\r\n            EC.invisibility_of_element_located((By.CSS_SELECTOR, \"div.layer-area.modal-area.modal-default.is--school--setting\"))\r\n        )\r\n        \r\n        # 학년 선택\r\n        grade_dropdown = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.ID, \"selectedStdnSchyr\"))\r\n        )\r\n        click_element(driver_normal, grade_dropdown)\r\n        first_grade = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \".dropdown--item\"))\r\n        )\r\n        click_element(driver_normal, first_grade)\r\n        \r\n        # 반 선택\r\n        class_dropdown = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.ID, \"selectedStdnBan\"))\r\n        )\r\n        click_element(driver_normal, class_dropdown)\r\n        first_class = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \".open .dropdown--item\"))\r\n        )\r\n        click_element(driver_normal, first_class)\r\n        \r\n        # 번호 선택\r\n        number_dropdown = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.ID, \"selectedStdnNum\"))\r\n        )\r\n        click_element(driver_normal, number_dropdown)\r\n        first_number = WebDriverWait(driver_normal, 10).until(\r\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \".open .dropdown--item:nth-child(1)\"))\r\n        )\r\n        click_element(driver_normal, first_number)\r\n        \r\n        # 비밀번호 입력\r\n        driver_normal.find_element(By.ID, \"stdn_loginPw\").send_keys(PASSWORD)\r\n        \r\n        # 로그인 버튼 클릭\r\n        login_button = driver_normal.find_element(By.CSS_SELECTOR, \"#login_form > div > div > button\")\r\n        click_element(driver_normal, login_button)\r\n        print(\"학생 로그인 정보 입력 및 로그인 버튼 클릭\")\r\n        \r\n        # 중복 로그인 팝업 처리\r\n        try:\r\n            duplicate_login_confirm = WebDriverWait(driver_normal, 5).until(\r\n                EC.element_to_be_clickable((By.ID, \"confirmPoupOk\"))\r\n            )\r\n            click_element(driver_normal, duplicate_login_confirm)\r\n            print(\"중복 로그인 팝업 확인\")\r\n        except TimeoutException:\r\n            print(\"중복 로그인 팝업이 없습니다.\")\r\n            pass\r\n        \r\n    except TimeoutException:\r\n        print(\"Fail: 학생 로그인 실패\")\r\n        driver_normal.save_screenshot(\"student_login_failure.png\")\r\n        assert False, \"학생 로그인 실패\"\r\n\r\n    try:\r\n        WebDriverWait(driver_normal, 20).until(\r\n            EC.any_of(\r\n                EC.title_contains(\"학생 대시보드\"),\r\n                EC.presence_of_element_located((By.CSS_SELECTOR, \".user-info\")),\r\n                EC.url_contains(\"/today\")                \r\n            )\r\n        )\r\n        print(\"학생이 대시보드 페이지에 접근했습니다.\")\r\n    except TimeoutException:\r\n        print(\"Fail: 학생 대시보드 접근 실패\")\r\n        driver_normal.save_screenshot(\"student_dashboard_failure.png\")\r\n        assert False, \"학생 대시보드 접근 실패\"\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test_script/test_01_e_login.py b/test_script/test_01_e_login.py
--- a/test_script/test_01_e_login.py	(revision cc171a47b1a8e49266df289afc69c2dfcb6e95cd)
+++ b/test_script/test_01_e_login.py	(date 1735202508297)
@@ -102,6 +102,27 @@
     except TimeoutException:
         print("인증번호 입력 필드가 없음, 입력하지 않음.")
 
+    # 4. 중복 로그인 팝업 처리
+    try:
+        # 중복 로그인 팝업 확인
+        multi_login_popup = WebDriverWait(driver_incognito, 5).until(
+            EC.visibility_of_element_located((By.CSS_SELECTOR, "#teacher-multi-login > div.layer__container"))
+        )
+        print("중복 로그인 팝업이 나타났습니다.")
+
+        # 다른 기기 로그아웃 라디오 버튼 선택
+        force_logout_radio = driver_incognito.find_element(By.CSS_SELECTOR, "#force-logout")
+        force_logout_radio.click()
+        print("다른 기기 로그아웃 라디오 버튼 선택")
+
+        # 로그인 버튼 클릭
+        login_button = driver_incognito.find_element(By.CSS_SELECTOR, "#teacher-multi-login > div.layer__container > div.page__button > button.button-main.violet.width-150")
+        login_button.click()
+        print("로그인 버튼 클릭")
+
+    except TimeoutException:
+        print("중복 로그인 팝업이 나타나지 않았습니다. 대시보드 페이지 접근 확인합니다.")
+
     # 대시보드 페이지 접근 확인
     try:
         WebDriverWait(driver_incognito, 10).until(
Index: test_script/test_03_e_mypage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom selenium.webdriver.common.by import By\r\nfrom selenium.webdriver.support.ui import WebDriverWait\r\nfrom selenium.webdriver.support import expected_conditions as EC\r\nfrom selenium.common.exceptions import TimeoutException, ElementNotInteractableException\r\nimport os\r\nimport random\r\n\r\n\r\n@pytest.mark.e_test\r\ndef test_007_teacher_mypage1(driver_incognito, base_url):\r\n    \"\"\"대시보드 - 메인 페이지 진입\"\"\"\r\n    try:\r\n        # 대시보드 프로필 아이콘 클릭\r\n        profile_box_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#renewalMainPage > div:nth-child(2) > div > div.intro_today_area.intro_area > div.intro-today.intro_character > div > div.intro_profile.intro-today__info.box-bg__white > div.today-info__profile > div > p\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", profile_box_button)\r\n        print(\"대시보드 프로필 이미지 클릭\")\r\n\r\n    except Exception as e:\r\n        print(f\"Fail: 대시보드 프로필 이미지 클릭 실패 - {str(e)}\")\r\n        driver_incognito.save_screenshot(\"teacher_mypage_failure.png\")\r\n        assert False, f\"대시보드 프로필 이미지 클릭 실패: {str(e)}\"\r\n\r\n    # 대시보드 > 마이페이지 접근 확인\r\n    try:\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            EC.url_contains(\"/v2/mypage/modify\")\r\n        )\r\n        print(\"교사가 대시보드 프로필로 마이페이지에 접근했습니다.\")\r\n    except TimeoutException:\r\n        print(\"Fail: 교사 대시보드 프로필로 마이페이지 접근 실패\")\r\n        driver_incognito.save_screenshot(\"teacher_dashboard_failure.png\")\r\n        assert False, \"교사 대시보드 프로필로 마이페이지 접근 실패\"\r\n\r\n    # 마이페이지에서 뒤로가기 또는 /today로 진입\r\n    try:\r\n        # 뒤로가기\r\n        driver_incognito.back()\r\n        print(\"뒤로가기 클릭\")\r\n\r\n        # 또는 /today로 진입\r\n        # driver_incognito.get(\"/today\")\r\n        # print(\"/today 페이지로 진입했습니다.\")\r\n        \r\n        # 대시보드 페이지 접근 확인\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            EC.url_contains(\"/today\")  # /main 제거\r\n        )\r\n        print(\"교사가 대시보드 페이지에 접근했습니다.\")\r\n    except TimeoutException:\r\n        print(\"Fail: 대시보드 접근 실패\")\r\n        driver_incognito.save_screenshot(\"dashboard_failure.png\")\r\n        assert False, \"대시보드 접근 실패\"\r\n\r\n@pytest.mark.e_test\r\ndef test_008_teacher_mypage2(driver_incognito, base_url):\r\n    \"\"\"사용자 드롭다운 메뉴로 마이페이지 진입 및 버튼 확인\"\"\"\r\n    \r\n    try:\r\n        # 대시보드 프로필 아이콘 클릭\r\n        header_profile_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > button > span\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", header_profile_button)\r\n        print(\"대시보드 프로필 이미지 클릭\")\r\n\r\n        # 드롭다운 팝업 확인\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            EC.visibility_of_element_located(\r\n                (By.CSS_SELECTOR, \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div\"))\r\n        )\r\n        print(\"드롭다운 팝업이 노출되었습니다.\")\r\n\r\n        # 버튼 확인\r\n        button_selectors = [\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(1) > div > a:nth-child(1)\",  # 정보 수정\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(1) > div > a:nth-child(2)\",  # 나의 이력\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(2) > div > a:nth-child(1)\",  # 1:1 문의\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(2) > div > a:nth-child(2)\",  # 이용약관\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(2) > div > a:nth-child(3)\",  # 개인정보 처리방침\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(2) > div > a:nth-child(4)\",  # 탈퇴\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(3) > div > a:nth-child(1)\",  # 공지사항\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(3) > div > a:nth-child(2)\",  # 자주 묻는 질문\r\n            \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(3) > div > a:nth-child(3)\"   # 이용 안내\r\n        ]\r\n\r\n        for selector in button_selectors:\r\n            button = WebDriverWait(driver_incognito, 10).until(\r\n                EC.presence_of_element_located((By.CSS_SELECTOR, selector))\r\n            )\r\n            assert button.is_displayed(), f\"버튼이 노출되지 않았습니다: {selector}\"\r\n            print(f\"버튼이 정상적으로 노출되었습니다: {selector}\")\r\n\r\n        print(\"모든 버튼이 정상적으로 노출되었습니다. - Pass\")\r\n\r\n    except Exception as e:\r\n        print(f\"Fail: 버튼 노출 확인 실패 - {str(e)}\")\r\n\r\n\r\n@pytest.mark.e_test\r\ndef test_009_teacher_mypage3(driver_incognito, base_url):\r\n    \"\"\"나의 이력 버튼 클릭을 통한 마이페이지 진입 확인 및 정보 수정 페이지 접근 확인\"\"\"\r\n    \r\n    try:\r\n        # 드롭다운 팝업이 열려 있는 상태에서 나의 이력 버튼 클릭\r\n        mypage_record_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#gnb > div.header--wrapper > div.header--utill > div.header--utill__user > div > div > div > div > div > div.mypage--left__menubox > div:nth-child(1) > div > a:nth-child(2)\"))  # 나의 이력\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", mypage_record_button)\r\n        print(\"나의 이력 버튼 클릭\")\r\n\r\n        # 나의 이력 페이지 확인\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            EC.url_contains(\"/v2/mypage/record\")  # 나의 이력 페이지 URL 확인\r\n        )\r\n        print(\"나의 이력 페이지에 접근했습니다.\")\r\n\r\n        # 정보 수정 버튼 클릭\r\n        info_modify_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#record > div > div > div.mypage--left > div.mypage--left__menubox > div:nth-child(1) > div > a:nth-child(1)\"))  # 정보 수정\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", info_modify_button)\r\n        print(\"정보 수정 버튼 클릭\")\r\n\r\n        # 정보 수정 페이지 확인\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            EC.url_contains(\"/v2/mypage/modify\")  # 정보 수정 페이지 URL 확인\r\n        )\r\n        print(\"정보 수정 페이지에 접근했습니다.\")\r\n\r\n    except Exception as e:\r\n        print(f\"Fail: 나의 이력 페이지 접근 또는 정보 수정 페이지 접근 실패 - {str(e)}\")\r\n        driver_incognito.save_screenshot(\"mypage_history_failure.png\")\r\n        assert False, f\"나의 이력 페이지 또는 정보 수정 페이지 접근 실패: {str(e)}\"\r\n        \r\n@pytest.mark.e_test\r\ndef test_010_teacher_modify(driver_incognito, base_url):\r\n    \"\"\"회원정보 (비밀번호/이메일) 수정\"\"\"\r\n\r\n    try:\r\n        # 비밀번호 입력 필드 찾기 및 값 입력\r\n        password_input = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--right.mypage-member > form > table > tbody > tr:nth-child(3) > td > div > input[type=password]\"))\r\n        )\r\n        password_input.clear()  # 기존 값 지우기\r\n        password_input.send_keys('2w2w2w2w2w')\r\n        print(\"비밀번호 입력 완료\")\r\n\r\n        # 인증하기 버튼 클릭\r\n        verify_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--right.mypage-member > form > table > tbody > tr:nth-child(3) > td > div > button\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", verify_button)\r\n        print(\"인증하기 버튼 클릭\")\r\n\r\n        # 확인 팝업의 버튼 클릭\r\n        confirm_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div:nth-child(2) > div > div > div.layer__container.alert.active > div.page__button > button\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", confirm_button)\r\n        print(\"확인 팝업 버튼 클릭\")\r\n\r\n        # 새 비밀번호 입력 필드에 값 입력\r\n        new_password_input = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--right.mypage-member > form > table > tbody > tr:nth-child(4) > td > input\"))\r\n        )\r\n        new_password_input.clear()  # 기존 값 지우기\r\n        new_password_input.send_keys('2w2w2w2w2w')\r\n        print(\"새 비밀번호 입력 완료\")\r\n\r\n        # 비밀번호 확인 입력 필드에 값 입력\r\n        confirm_password_input = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--right.mypage-member > form > table > tbody > tr:nth-child(5) > td > input\"))\r\n        )\r\n        confirm_password_input.clear()  # 기존 값 지우기\r\n        confirm_password_input.send_keys('2w2w2w2w2w')\r\n        print(\"비밀번호 확인 입력 완료\")\r\n\r\n        # 이메일 입력 필드에 값 입력\r\n        email_input = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--right.mypage-member > form > table > tbody > tr:nth-child(7) > td > div > input:nth-child(1)\"))\r\n        )\r\n        email_input.clear()  # 기존 값 지우기\r\n        email_input.send_keys('seleniumeclass1')\r\n        print(\"이메일 입력 완료\")\r\n\r\n        # 수정 완료 버튼 클릭\r\n        submit_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--right.mypage-member > div.page__button > button.button-main.is--large.violet.width-240\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", submit_button)\r\n        print(\"수정 완료 버튼 클릭\")\r\n\r\n        # 확인 팝업의 버튼 클릭\r\n        final_confirm_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div:nth-child(2) > div > div > div.layer__container.alert.active > div.page__button > button\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", final_confirm_button)\r\n        print(\"최종 확인 팝업 버튼 클릭\")\r\n\r\n    except Exception as e:\r\n        print(f\"Fail: 회원정보 수정 실패 - {str(e)}\")\r\n        driver_incognito.save_screenshot(\"teacher_modify_failure.png\")\r\n        assert False, f\"회원정보 수정 실패: {str(e)}\"\r\n\r\n@pytest.mark.e_test\r\ndef test_011_teacher_profile_picture(driver_incognito, base_url):\r\n    \"\"\"프로필 사진 변경 테스트\"\"\"\r\n\r\n    try:\r\n        # 기존 프로필 사진 요소 가져오기\r\n        existing_profile_picture = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--left > div.mypage--left__profile > div > p\"))  # 기존 프로필 사진의 CSS 선택자\r\n        )\r\n        \r\n        # 기존 프로필 사진 상태 확인\r\n        existing_image_class = existing_profile_picture.get_attribute(\"class\")\r\n        print(f\"기존 프로필 사진 클래스: {existing_image_class}\")\r\n\r\n        # 기존 이미지가 없을 경우\r\n        if \"avatar-no-image\" in existing_image_class:\r\n            existing_image_number = None\r\n            print(\"기존 프로필 사진이 없습니다.\")\r\n        else:\r\n            # 기존 프로필 사진 URL 가져오기\r\n            existing_image_style = existing_profile_picture.get_attribute(\"style\")\r\n            existing_image_url = existing_image_style.split(\"url(\")[1].split(\")\")[0].replace(\"&quot;\", \"\")  # 기존 이미지 URL\r\n            existing_image_number = existing_image_url.split(\"/\")[-1].split(\".\")[0]  # URL에서 숫자 부분 추출\r\n            print(f\"기존 프로필 사진 URL: {existing_image_url}, 숫자: {existing_image_number}\")\r\n\r\n        # 프로필 사진 선택 버튼 클릭\r\n        profile_picture_button = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--left > div.mypage--left__profile > div > button > p\"))\r\n        )\r\n        driver_incognito.execute_script(\"arguments[0].click();\", profile_picture_button)\r\n        print(\"프로필 사진 선택 버튼 클릭\")\r\n\r\n        # 팝업 확인\r\n        try:\r\n            # 팝업이 나타나는지 확인\r\n            popup = WebDriverWait(driver_incognito, 10).until(\r\n                EC.visibility_of_element_located(\r\n                    (By.CSS_SELECTOR, \"#contentsContainer > div.layer-area.modal-area.modal-confirm__popup.ele_ui > div.layer__container\"))\r\n            )\r\n            print(\"팝업이 나타났습니다.\")\r\n\r\n            # 확인 버튼 클릭 가능할 때까지 기다리기\r\n            confirm_button = WebDriverWait(driver_incognito, 10).until(\r\n                EC.element_to_be_clickable(\r\n                    (By.CSS_SELECTOR, \"#confirmPoupOk\")\r\n                )\r\n            )\r\n            driver_incognito.execute_script(\"arguments[0].click();\", confirm_button)\r\n            print(\"확인 버튼 클릭\")\r\n\r\n            # 팝업이 닫힐 때까지 대기\r\n            WebDriverWait(driver_incognito, 10).until(\r\n                EC.invisibility_of_element_located(\r\n                    (By.CSS_SELECTOR, \"#contentsContainer > div.layer-area.modal-area.modal-confirm__popup.ele_ui > div.layer__container\")\r\n                )\r\n            )\r\n            print(\"팝업이 닫혔습니다.\")\r\n\r\n            # 프로필 아이콘 다시 클릭\r\n            profile_picture_button = WebDriverWait(driver_incognito, 10).until(\r\n                EC.presence_of_element_located(\r\n                    (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--left > div.mypage--left__profile > div > button > p\"))\r\n            )\r\n            driver_incognito.execute_script(\"arguments[0].click();\", profile_picture_button)\r\n            print(\"프로필 사진 선택 버튼 클릭\")\r\n\r\n        except TimeoutException:\r\n            print(\"팝업이 나타나지 않았습니다. 계속 진행합니다.\")\r\n\r\n        # 파일 경로 설정\r\n        file_directory = r\"C:\\Users\\Admin\\PycharmProjects\\selenium-pytest\\inputfile\\profile\"\r\n        files = [f for f in os.listdir(file_directory) if f.endswith(('.jpg', '.jpeg', '.png'))]  # 이미지 파일 목록 가져오기\r\n\r\n        # 랜덤으로 파일 선택\r\n        selected_file = random.choice(files)\r\n        file_path = os.path.join(file_directory, selected_file)\r\n        print(f\"선택된 이미지 파일: {file_path}\")\r\n\r\n        # 파일 선택 대화상자에서 이미지 파일 선택\r\n        file_input = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"input[type='file']\"))  # 파일 입력 필드 선택\r\n        )\r\n        file_input.send_keys(file_path)  # 랜덤으로 선택된 이미지 파일 경로 입력\r\n        print(\"이미지 파일 선택 완료\")\r\n\r\n        # 변경된 프로필 사진 요소 가져오기\r\n        new_profile_picture = WebDriverWait(driver_incognito, 10).until(\r\n            EC.presence_of_element_located(\r\n                (By.CSS_SELECTOR, \"#modify > div > div > div.mypage--left > div.mypage--left__profile > div > p\"))  # 변경된 프로필 사진의 CSS 선택자\r\n        )\r\n        \r\n        # 변경된 프로필 사진이 로드될 때까지 대기\r\n        WebDriverWait(driver_incognito, 10).until(\r\n            lambda driver: new_profile_picture.get_attribute(\"style\") != \"\"  # 스타일 속성이 비어있지 않을 때까지 대기\r\n        )\r\n\r\n        # 변경된 프로필 사진 상태 확인\r\n        new_image_class = new_profile_picture.get_attribute(\"class\")\r\n        print(f\"변경된 프로필 사진 클래스: {new_image_class}\")\r\n\r\n        # 변경된 이미지가 없을 경우\r\n        if \"avatar-no-image\" in new_image_class:\r\n            new_image_number = None\r\n            print(\"변경된 프로필 사진이 없습니다.\")\r\n        else:\r\n            # 변경된 프로필 사진 URL 가져오기\r\n            new_image_style = new_profile_picture.get_attribute(\"style\")\r\n            new_image_url = new_image_style.split(\"url(\")[1].split(\")\")[0].replace(\"&quot;\", \"\")  # 변경된 이미지 URL\r\n            new_image_number = new_image_url.split(\"/\")[-1].split(\".\")[0]  # URL에서 숫자 부분 추출\r\n            print(f\"변경된 프로필 사진 URL: {new_image_url}, 숫자: {new_image_number}\")\r\n\r\n        # 기존 이미지 숫자와 변경된 이미지 숫자 비교\r\n        if existing_image_number is not None and new_image_number is not None and existing_image_number != new_image_number:\r\n            print(\"프로필 사진이 성공적으로 변경되었습니다.\")\r\n        elif existing_image_number is None and new_image_number is not None:\r\n            print(\"프로필 사진이 성공적으로 추가되었습니다.\")\r\n        else:\r\n            assert False, \"프로필 사진이 변경되지 않았습니다.\"\r\n\r\n    except Exception as e:\r\n        print(f\"Fail: 프로필 사진 변경 실패 - {str(e)}\")\r\n        driver_incognito.save_screenshot(\"teacher_profile_picture_failure.png\")\r\n        assert False, f\"프로필 사진 변경 실패: {str(e)}\"\r\n\r\n #@pytest.mark.e_test\r\n #def test_012_teacher_profile_picture(driver_incognito, base_url):\r\n\r\n    
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test_script/test_03_e_mypage.py b/test_script/test_03_e_mypage.py
--- a/test_script/test_03_e_mypage.py	(revision cc171a47b1a8e49266df289afc69c2dfcb6e95cd)
+++ b/test_script/test_03_e_mypage.py	(date 1735191469122)
@@ -288,13 +288,14 @@
         except TimeoutException:
             print("팝업이 나타나지 않았습니다. 계속 진행합니다.")
 
-        # 파일 경로 설정
-        file_directory = r"C:\Users\Admin\PycharmProjects\selenium-pytest\inputfile\profile"
-        files = [f for f in os.listdir(file_directory) if f.endswith(('.jpg', '.jpeg', '.png'))]  # 이미지 파일 목록 가져오기
+        # 파일 경로 설정 (상대 경로로 변경)
+        current_dir = os.path.dirname(os.path.abspath(__file__))  # 현재 파일의 디렉토리 경로
+        inputfile_directory = os.path.join(current_dir, '..', 'inputfile','profile')  # inputfile 폴더의 상대 경로
+        files = [f for f in os.listdir(inputfile_directory) if f.endswith(('.jpg', '.jpeg', '.png'))]  # 이미지 파일 목록 가져오기
 
         # 랜덤으로 파일 선택
         selected_file = random.choice(files)
-        file_path = os.path.join(file_directory, selected_file)
+        file_path = os.path.join(inputfile_directory, selected_file)  # 선택된 파일의 전체 경로
         print(f"선택된 이미지 파일: {file_path}")
 
         # 파일 선택 대화상자에서 이미지 파일 선택
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"fb8c8114-12c4-497b-b6c5-275be411769e\" name=\"변경\" comment=\"마이페이지 수정, 테스트 케이스 넘버 수정\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/h_tests/test_01_h_login.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/h_tests/test_01_h_login.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PREVIOUS_COMMIT_AUTHORS\">\r\n      <list>\r\n        <option value=\"wish4906 &lt;soso4906@gmail.com&gt;\" />\r\n      </list>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;wish4906&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/wish4906/selenium-pytest.git&quot;,\r\n    &quot;accountId&quot;: &quot;aef0e03f-9e9e-4eaa-88a5-fb94d1636f6a&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2nosjkHQCX1cDwUA9WSX6CVD4oS\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python 테스트.test-selenium.py 내 Python 테스트.executor\": \"Run\",\r\n    \"Python.test-selenium.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"settings.editor.selected.configurable\": \"org.jetbrains.plugins.github.ui.GithubSettingsConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Admin\\PycharmProjects\\selenium-pytest\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-98f27166c754-ba05f1cad1b1-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-242.21829.153\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"애플리케이션 수준\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\Admin\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"디폴트 작업\">\r\n      <changelist id=\"fb8c8114-12c4-497b-b6c5-275be411769e\" name=\"변경\" comment=\"\" />\r\n      <created>1729650900291</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1729650900291</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729651018070</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729651018070</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729656270750</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729656270750</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729657348072</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729657348072</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729657674040</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729657674040</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729657685690</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729657685690</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729659253539</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729659253539</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729659265638</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729659265638</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729665665275</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729665665275</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729668449207</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729668449207</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729669592474</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729669592474</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729669673061</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729669673061</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729744239508</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729744239508</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729766766930</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729766766930</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730796782667</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730796782667</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730874919255</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730874919255</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730875299838</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730875299838</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731998759215</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731998759215</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731999853414</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731999853414</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1732149673942</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1732149673942</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"test commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733708142977</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733708142977</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"마이페이지 수정, 테스트 케이스 넘버 수정\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1733727197082</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1733727197082</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"22\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"HEAD\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"test commit\" />\r\n    <MESSAGE value=\"마이페이지 수정, 테스트 케이스 넘버 수정\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"마이페이지 수정, 테스트 케이스 넘버 수정\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\r\n          <url>file://$PROJECT_DIR$/e_tests/__init__.py</url>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision cc171a47b1a8e49266df289afc69c2dfcb6e95cd)
+++ b/.idea/workspace.xml	(date 1735202913388)
@@ -4,10 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="fb8c8114-12c4-497b-b6c5-275be411769e" name="변경" comment="마이페이지 수정, 테스트 케이스 넘버 수정">
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+    <list default="true" id="fb8c8114-12c4-497b-b6c5-275be411769e" name="변경" comment="프로필 사진 변경, 프로필 사진 변경여부 체크">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/h_tests/test_01_h_login.py" beforeDir="false" afterPath="$PROJECT_DIR$/h_tests/test_01_h_login.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/e_tests/test_01_e_login.py" beforeDir="false" afterPath="$PROJECT_DIR$/e_tests/test_01_e_login.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/e_tests/test_03_e_mypage.py" beforeDir="false" afterPath="$PROJECT_DIR$/e_tests/test_03_e_mypage.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/teacher_profile_picture_failure.png" beforeDir="false" afterPath="$PROJECT_DIR$/teacher_profile_picture_failure.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/test_script/test_01_e_login.py" beforeDir="false" afterPath="$PROJECT_DIR$/test_script/test_01_e_login.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/test_script/test_03_e_mypage.py" beforeDir="false" afterPath="$PROJECT_DIR$/test_script/test_03_e_mypage.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -28,7 +31,6 @@
       </list>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="GitHubPullRequestSearchHistory">{
   &quot;lastFilter&quot;: {
@@ -36,6 +38,9 @@
     &quot;assignee&quot;: &quot;wish4906&quot;
   }
 }</component>
+  <component name="GithubDefaultAccount">
+    <option name="defaultAccountId" value="aef0e03f-9e9e-4eaa-88a5-fb94d1636f6a" />
+  </component>
   <component name="GithubPullRequestsUISettings">{
   &quot;selectedUrlAndAccountId&quot;: {
     &quot;url&quot;: &quot;https://github.com/wish4906/selenium-pytest.git&quot;,
@@ -51,15 +56,15 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Python 테스트.test-selenium.py 내 Python 테스트.executor": "Run",
-    "Python.test-selenium.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "main",
-    "settings.editor.selected.configurable": "org.jetbrains.plugins.github.ui.GithubSettingsConfigurable"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python 테스트.test-selenium.py 내 Python 테스트.executor&quot;: &quot;Run&quot;,
+    &quot;Python.test-selenium.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;vcs.Git&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="C:\Users\Admin\PycharmProjects\selenium-pytest" />
@@ -252,7 +257,23 @@
       <option name="project" value="LOCAL" />
       <updated>1733727197082</updated>
     </task>
-    <option name="localTasksCounter" value="22" />
+    <task id="LOCAL-00022" summary="프로필 사진 변경, 프로필 사진 변경여부 체크">
+      <option name="closed" value="true" />
+      <created>1733733812120</created>
+      <option name="number" value="00022" />
+      <option name="presentableId" value="LOCAL-00022" />
+      <option name="project" value="LOCAL" />
+      <updated>1733733812120</updated>
+    </task>
+    <task id="LOCAL-00023" summary="프로필 사진 변경, 프로필 사진 변경여부 체크">
+      <option name="closed" value="true" />
+      <created>1733733840338</created>
+      <option name="number" value="00023" />
+      <option name="presentableId" value="LOCAL-00023" />
+      <option name="project" value="LOCAL" />
+      <updated>1733733840338</updated>
+    </task>
+    <option name="localTasksCounter" value="24" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -281,7 +302,8 @@
   <component name="VcsManagerConfiguration">
     <MESSAGE value="test commit" />
     <MESSAGE value="마이페이지 수정, 테스트 케이스 넘버 수정" />
-    <option name="LAST_COMMIT_MESSAGE" value="마이페이지 수정, 테스트 케이스 넘버 수정" />
+    <MESSAGE value="프로필 사진 변경, 프로필 사진 변경여부 체크" />
+    <option name="LAST_COMMIT_MESSAGE" value="프로필 사진 변경, 프로필 사진 변경여부 체크" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
